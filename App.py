import streamlit as st
import pandas as pd
import os
from indicators import dataloader, simulation

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Ç–∏–∫–µ—Ä–∞–º
DATA_PATH = "tickers_data/"
MODELS = ["Random Forest", "Logistic Regression"]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤
def get_ticker_list():
    if not os.path.exists(DATA_PATH):
        st.error("–ü–∞–ø–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ –¥–∞–Ω–Ω—ã–º.")
        return []
    files = os.listdir(DATA_PATH)
    tickers = [file.split('.')[0] for file in files if file.endswith('.csv')]
    return tickers

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–∏–∫–µ—Ä—É
def load_ticker_data(ticker):
    file_path = os.path.join(DATA_PATH, f"{ticker}.csv")
    if not os.path.exists(file_path):
        st.error(f"–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∏–∫–µ—Ä–∞ {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return pd.DataFrame()
    data = dataloader(file_path)
    return data

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title("üíπ –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")
st.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏.")

# –í—ã–±–æ—Ä –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
initial_balance = st.number_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã):", min_value=0, value=100)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ä–æ–≤
ticker_list = get_ticker_list()
if not ticker_list:
    st.stop()

# –í—ã–±–æ—Ä —Ç–∏–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
selected_ticker = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:", ["-"] + ticker_list)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–∏–∫–µ—Ä –≤—ã–±—Ä–∞–Ω
if selected_ticker == "-":
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.")
    st.stop()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞
data = load_ticker_data(selected_ticker)
if data.empty:
    st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö.")
    st.stop()

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö
st.subheader(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ä–∞: {selected_ticker}")
st.dataframe(data.head())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
st.sidebar.header("ü§ñ –í—ã–±–æ—Ä ML –º–æ–¥–µ–ª–∏")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ML –º–æ–¥–µ–ª–∏
choose_ML_model = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏:",
    MODELS
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã RSI
rsi_window = st.sidebar.slider("–û–∫–Ω–æ RSI", min_value=5, max_value=30, value=14)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã MACD
macd_short = st.sidebar.slider("–ö–æ—Ä–æ—Ç–∫–æ–µ –æ–∫–Ω–æ MACD", min_value=5, max_value=30, value=12)
macd_long = st.sidebar.slider("–î–ª–∏–Ω–Ω–æ–µ –æ–∫–Ω–æ MACD", min_value=10, max_value=60, value=26)
macd_signal = st.sidebar.slider("–°–∏–≥–Ω–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ MACD", min_value=5, max_value=30, value=9)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Bollinger Bands
bb_window = st.sidebar.slider("–û–∫–Ω–æ Bollinger Bands", min_value=10, max_value=50, value=20)
bb_num_std = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π", min_value=1.0, max_value=3.0, value=2.0)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Stochastic Oscillator
st_k_period = st.sidebar.slider("K-–ø–µ—Ä–∏–æ–¥ Stochastic", min_value=5, max_value=30, value=14)
st_d_period = st.sidebar.slider("D-–ø–µ—Ä–∏–æ–¥ Stochastic", min_value=3, max_value=15, value=3)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Aroon
aroon_window = st.sidebar.slider("–û–∫–Ω–æ Aroon", min_value=5, max_value=50, value=14)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã Parabolic SAR
psar_step = st.sidebar.slider("–®–∞–≥ Parabolic SAR", min_value=0.01, max_value=0.1, value=0.02)
psar_max_step = st.sidebar.slider("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ Parabolic SAR", min_value=0.1, max_value=0.5, value=0.2)

# –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é"):
    result = simulation(
        data,
        rsi_window,
        [macd_short, macd_long, macd_signal],
        [bb_window, bb_num_std, 2, 2],
        [st_k_period, st_d_period, 3, 3],
        aroon_window,
        [psar_step, psar_max_step],
        balance=initial_balance
    )

    st.success(f"–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {result:.2f}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.write(f"–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ–≤—ã–π –∫–∞–ø–∏—Ç–∞–ª: {result:.2f} –µ–¥–∏–Ω–∏—Ü –≤–∞–ª—é—Ç—ã.")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞–Ω–Ω—ã–º
if st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º"):
    st.write(data.describe())
